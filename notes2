Panel is comprised of cylinders


panel x {
	member leg
	member br1
	member h1
}



draw on  x, y plane by default.

very basic square shape using a unit of 2 ( -1 => 1 )

vertices: [
	0 : [-1, 1],
	1: [-1, -1],
	2: [ 1, -1],
	3: [1, 1]
]

edges: [
	[0, 1],
	[1, 2],
	[2, 3],
	[3, 0]
]


function buildTower(){
	
}

/**
* Helper method to move a panel mesh into the correct position
*/
function alignToFace1(){
	//4 legged tower, move out to face 1 position

	//rotate by 90 clock for face 2

	//rotate by 180 clock for face 3
 
	//rotate by 270 clock for face 4

}


/**
* Function for the 4 legged tower
*/
function build3dPanel(bottomWidth, topWidth, bottomDepth, topDepth, bottomHeight, topHeight)	{

	var face1 = buildPanelMesh(catalogRef).alignToFace1(bottomWidth, topWidth, bottomDepth, topDepth, bottomHeight, topHeight);
	var face2 = buildPanelMesh(catalogRef).alignToFace2(bottomWidth, topWidth, bottomDepth, topDepth, bottomHeight, topHeight);
	var face3 = buildPanelMesh(catalogRef).alignToFace3(bottomWidth, topWidth, bottomDepth, topDepth, bottomHeight, topHeight);
	var face4 = buildPanelMesh(catalogRef).alignToFace4(bottomWidth, topWidth, bottomDepth, topDepth, bottomHeight, topHeight);

}

/**
* returns a edge mesh for a panel, panel is in the x, y plane.
* Depending on the type of structure, panel will need to be translated
* and rotated to build out the full panel / section representation
*/
function buildPanelMesh(edges, vertices)	{
	
	for(var i = 0; i < edges.length; i++){
		var esx = vertices[edges[i][0]][0];
		var esy = vertices[edges[i][0]][1];
		var eex = vertices[edges[i][1]][0];
		var eey = vertices[edges[i][1]][1];

		var sv = new THREE.Vector3(esx, esy, 0);
		var ev = new THREE.Vector3(eex, eey, 0);
		var edge = new THREE.Vector3().subVectors(ev, sv);
		var edgeMesh = new THREE.Mesh(edgeGeometry, material);	
		var edgeGeometry = new THREE.CylinderBufferGeometry( /*radius top*/ 0.2, /*radius bottom*/ 0.2, /*height*/ edge.length(), /*radial segments*/ 8, /*height segments*/ 1); 		
		//rotate item around the y axis, which was the original direction of the geometry
		var axis = new THREE.Vector3(0, 1, 0);
 	 	edgeMesh.quaternion.setFromUnitVectors(axis, direction.clone().normalize());
		edgeMesh.position.x = (pointB.x + pointA.x) / 2;
 		edgeMesh.position.y = (pointB.y + pointA.y) / 2;
    		edgeMesh.position.z = (pointB.z + pointA.z) / 2;
	}
	return edgeMesh;
}